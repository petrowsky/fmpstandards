/*
 * =====================================================
 * VariableList ( keys; values; scope )
 * 
 * RETURNS:
 *		(string) key/value pairs as $key = value in
 *		positional order
 *
 * PARAMETERS:
 *		@keys = List() of key names
 *		@values = List() of values
 *		@scope = (enum) global, local
 *
 * DEPENDENCIES:
 *		none
 *
 * PURPOSE:
 *		Takes two compliment set of lists
 *		and turns them into FMP defined variables
 *
 * NOTES:
 *		none
 * =====================================================
 *
 */
 
Let ( [
	~singleValue = ValueCount ( keys ) = 1 and ValueCount ( values ) = 1; // only one key/value pair
	~isValid  = ValueCount ( keys ) = ValueCount ( values ); // both lists have the same number of values
	~notEmpty = not IsEmpty( keys ) and not IsEmpty ( values ); // lists aren't empty
	~value = GetValue ( values ; 1 );
	~valueIsNumber  = Length ( GetAsNumber ( Filter ( ~value; "0123456789.-" ) ) ) = Length ( ~value );
	~value = Case (
		~valueIsNumber;
			~value;

		Quote ( ~value ) // default for all strings
	);
	~string = If ( scope = "global" ; "$$" ; "$" ) & GetValue ( keys ; 1 )  & " = " & ~value & If ( ValueCount( keys ) = 1; "" ; ";¶" )
];
	Case (
		~singleValue;
			~string;
			
		~isValid and ~notEmpty;
			~string &
			VariableList ( MiddleValues ( keys ; 2 ; 1000000 ) ; MiddleValues ( values ; 2 ; 1000000 ) ; scope );
		
		// default
		"ERROR » Lists don't match in length"
	)
)

/*
// Testing code
~list (
  List(
    "foo";
    "bar"
  )
;
  List(
    "single value";
    "multiple¶values"
  )
; "local" )
*/