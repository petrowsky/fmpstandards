/**
 * =====================================
 * #GetNameList ( parameters )
 *
 * RETURNS:
 *		A return-delimited list of names from the name-value pairs in parameters.
 *
 * PARAMETERS:
 *		parameters: A string of serialized name-value pair data in Let notation.
 *
 * EXAMPLE:
 *		#GetNameList (
 *			# ( "name" ; "value" )
 *			& # ( "foo" ; "bar" );
 *		) = List ( "name" ; "foo" )
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		CREATED on 2013-01-24 by Daniel Smith dansmith65@gmail.com
 * =====================================
 */

Case (
	/* Step 0, set-up */
	not $#GetNameList.step ;
		Let ( [
			~empty = IsEmpty ( Trim ( parameters ) ) ;
			parameters =
				Substitute (
					¶ & parameters ;
					[ "¶$" ; ¶ ] ;		// remove "$" prefix
					[ "¶$" ; ¶ ] ;		// remove "$$" prefix
					[ "¶¶" ; ¶ ]		// remove empty values
				) ;

			$#GetNameList.parameterCount = ValueCount ( parameters ) ;
			$#GetNameList.step = If ( ~empty ; -1 ; /* Else */ 1 )
		];
			#GetNameList ( parameters )
		);

	/* Step 1, check each parameter */
	$#GetNameList.step = 1 ;
		Let ( [
			$#GetNameList.i = $#GetNameList.i + 1 ;
			~pair = GetValue ( parameters ; $#GetNameList.i ) ;
			~name = Left ( ~pair ; Position ( ~pair ; " = " ; 1 ; 1 ) - 1 ) ;
			$#GetNameList.result =
				// only include ~name if it isn't already in the result
				List (
					$#GetNameList.result ;
					If ( IsEmpty ( FilterValues ( $#GetNameList.result ; ~name ) ) ;
						~name
					)
				);

			$#GetNameList.step =
				If ( $#GetNameList.i < $#GetNameList.parameterCount ;
					$#GetNameList.step ;
					/* Else */ $#GetNameList.step + 1
				)
		];
			#GetNameList ( parameters )
		);

	/* Step 2, clean-up and return result */
	$#GetNameList.step = 2 or $#GetNameList.step = -1 ;
		Let ( [
			~error = $#GetNameList.step = -1 ;
			~result = $#GetNameList.result ;

			// purge variables
			$#GetNameList.i = "" ;
			$#GetNameList.parameterCount = "" ;
			$#GetNameList.result = "" ;
			$#GetNameList.step = ""
		];
			If ( ~error ; "" ; /* Else */ ~result )
		)
)