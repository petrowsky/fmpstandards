/**
 * =====================================
 * #List ( value )
 *
 * RETURNS:
 *		Encoded value with trailing return and data type preserved.
 *
 * PARAMETERS:
 *		value: The value to encode.
 *
 * EXAMPLE:
 *		#List ( "value1" )
 *		& #List (
 *			#List ( "subValue" )
 *			&  #List ( "subValue2" )
 *		)
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		MODIFIED on 2013-MAY-09 by Daniel Smith dansmith65@gmail.com to encode
 *		a value like the current version of # ( name ; value ) custom function
 *		CREATED on 2012-NOV-26 by Daniel Smith dansmith65@gmail.com
 * =====================================
 */

Let ( [
	// characters used as separators in a date field
	~DATECHARS = "\/-" ;
	// characters used as separators in a time field
	~TIMECHARS = ":" ;
	
	~value =
		Case (
			// test for specific values that will be treated as a number in the next section
			value = "" or value = "?" ;
				Quote ( value ) ;

			value ≠ GetAsNumber ( value ) ;
				Quote ( value ) ;

			// at this point, value is a number, timestamp, date, or time
			// negative time value
			value < 0 and not IsEmpty ( Filter ( value ; ~TIMECHARS ) ) ;
				"GetAsTime ( " & Quote ( value ) & " )" ;

			not IsEmpty ( Filter ( value ; ~DATECHARS ) )
			and not IsEmpty ( Filter ( value ; ~TIMECHARS ) ) ;
				"GetAsTimestamp ( " & Quote ( value ) & " )" ;

			not IsEmpty ( Filter ( value ; ~TIMECHARS ) ) ;
				"GetAsTime ( " & Quote ( value ) & " )" ;

			/**
			 * At this point, if value is less than 1, it must be either
			 * a negative number or a decimal exponent.
			 * This section must be after test for time because time can
			 * contain a negative number.
			 * This section should be before test for date, because a date
			 * can contain a -, which is also used for a negative number.
			 */
			value < 1 ;
				GetAsNumber ( value ) ;

			not IsEmpty ( Filter ( value ; ~DATECHARS ) ) ;
				"GetAsDate ( " & Quote ( value ) & " )" ;

			/**
			 * either a number, or:
			 * if the ~DATECHARS and ~TIMECHARS variables do not contain the
			 * separator chars in use on the current computer, store the
			 * date/time/timestamp as a number
			 */
			/* Else */
				GetAsNumber ( value )
		)
] ;
	Case (
		IsValidExpression ( ~value )
			/**
			 * the following Evaluate statement causes the function to calculate
			 *  ~30% slower, so it may be best to comment it in a production
			 * environment and only use it for development/testing
			 */
			// and Evaluate ( ~value ) = value
		;
		~value & ¶ ;

		//else, ~value is not a valid expression...
		"/* Error "
		& 1200	// Generic calculation error
		& " value: "
		& Quote (
			Substitute (	// escape comment character sequences
				value ;
				[ "*/" ; "\*\/" ] ;
				[ "/*" ; "\/\*" ]
			)
		)
		& " */"
		& ¶
	)
)