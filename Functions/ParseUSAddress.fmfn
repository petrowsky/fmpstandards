Let ( [
  // Normalize the address
  ~address = " " & Substitute ( address ;
    [ "," ; " , " ]; // add spaces around commas
    [ "." ; " " ]; // change periods to spaces
    [ "   " ; " " ]; // tripple spaces to single
    [ "  " ; " " ]; // double spaces to single
    [ "#" ; "Apt " ] // convert # to recognized ~units - # cannot be filtered
    ) & " " ;

  ~directionals = List (
    "N";
    "NE";
    "E";
    "SE";
    "S";
    "SW";
    "W";
    "NW";
    );

  ~units = List (
    "apartment";
    "apt";
    "bldg";
    "box";
    "building";
    "department";
    "dept";
    "floor";
    "hangar";
    "hngr";
    "lot";
    "pier";
    "room";
    "slip";
    "space";
    "spc";
    "ste";
    "stop";
    "suite";
    "trailer";
    "trlr";
    "unit";
    "unt";
    );

  ~statesAbbr = List (
    "AL";
    "AK";
    "AS";
    "AZ";
    "AR";
    "CA";
    "CO";
    "CT";
    "DE";
    "DC";
    "FM";
    "FL";
    "GA";
    "GU";
    "HI";
    "ID";
    "IL";
    "IN";
    "IA";
    "KS";
    "KY";
    "LA";
    "ME";
    "MH";
    "MD";
    "MA";
    "MI";
    "MN";
    "MS";
    "MO";
    "MT";
    "NE";
    "NV";
    "NH";
    "NJ";
    "NM";
    "NY";
    "NC";
    "ND";
    "MP";
    "OH";
    "OK";
    "OR";
    "PW";
    "PA";
    "PR";
    "RI";
    "SC";
    "SD";
    "TN";
    "TX";
    "UT";
    "VT";
    "VI";
    "VA";
    "WA";
    "WV";
    "WI";
    "WY";
    );

  ~statesLong = List (
    "alabama";
    "alaska";
    "american samoa";
    "arizona";
    "arkansas";
    "california";
    "colorado";
    "connecticut";
    "delaware";
    "district of columbia";
    "federated states of micronesia";
    "florida";
    "georgia";
    "guam";
    "hawaii";
    "idaho";
    "illinois";
    "indiana";
    "iowa";
    "kansas";
    "kentucky";
    "louisiana";
    "maine";
    "marshall islands";
    "maryland";
    "massachusetts";
    "michigan";
    "minnesota";
    "mississippi";
    "missouri";
    "montana";
    "nebraska";
    "nevada";
    "new hampshire";
    "new jersey";
    "new mexico";
    "new york";
    "north carolina";
    "north dakota";
    "northern mariana islands";
    "ohio";
    "oklahoma";
    "oregon";
    "palau";
    "pennsylvania";
    "puerto rico";
    "rhode island";
    "south carolina";
    "south dakota";
    "tennessee";
    "texas";
    "utah";
    "vermont";
    "virgin islands";
    "virginia";
    "washington";
    "west virginia";
    "wisconsin";
    "wyoming";
    );

  // http://pe.usps.com/text/pub28/28apc_002.htm
  ~streets = List (
    "allee";
    "alley";
    "ally";
    "aly";
    "anex";
    "annex";
    "annx";
    "anx";
    "arc";
    "arcade";
    "av";
    "ave";
    "aven";
    "avenu";
    "avenue";
    "avn";
    "avnue";
    "bayoo";
    "bayou";
    "bch";
    "beach";
    "bend";
    "bg";
    "bgs";
    "blf";
    "blfs";
    "bluf";
    "bluff";
    "bluffs";
    "blvd";
    "bnd";
    "bot";
    "bottm";
    "bottom";
    "boul";
    "boulevard";
    "boulv";
    "br";
    "branch";
    "brdge";
    "brg";
    "bridge";
    "brk";
    "brks";
    "brnch";
    "brook";
    "brooks";
    "btm";
    "burg";
    "burgs";
    "byp";
    "bypa";
    "bypas";
    "bypass";
    "byps";
    "byu";
    "camp";
    "canyn";
    "canyon";
    "cape";
    "causeway";
    "causway";
    "cen";
    "cent";
    "center";
    "centers";
    "centr";
    "centre";
    "cir";
    "circ";
    "circl";
    "circle";
    "circles";
    "cirs";
    "ck";
    "clb";
    "clf";
    "clfs";
    "cliff";
    "cliffs";
    "club";
    "cmn";
    "cmp";
    "cnter";
    "cntr";
    "cnyn";
    "common";
    "cor";
    "corner";
    "corners";
    "cors";
    "course";
    "court";
    "courts";
    "cove";
    "coves";
    "cp";
    "cpe";
    "cr";
    "crcl";
    "crcle";
    "crecent";
    "creek";
    "cres";
    "crescent";
    "cresent";
    "crest";
    "crk";
    "crossing";
    "crossroad";
    "crscnt";
    "crse";
    "crsent";
    "crsnt";
    "crssing";
    "crssng";
    "crst";
    "crt";
    "cswy";
    "ct";
    "ctr";
    "ctrs";
    "cts";
    "curv";
    "curve";
    "cv";
    "cvs";
    "cyn";
    "dale";
    "dam";
    "div";
    "divide";
    "dl";
    "dm";
    "dr";
    "driv";
    "drive";
    "drives";
    "drs";
    "drv";
    "dv";
    "dvd";
    "est";
    "estate";
    "estates";
    "ests";
    "exp";
    "expr";
    "express";
    "expressway";
    "expw";
    "expy";
    "ext";
    "extension";
    "extensions";
    "extn";
    "extnsn";
    "exts";
    "falls";
    "ferry";
    "field";
    "fields";
    "flat";
    "flats";
    "fld";
    "flds";
    "fls";
    "flt";
    "flts";
    "ford";
    "fords";
    "forest";
    "forests";
    "forg";
    "forge";
    "forges";
    "fork";
    "forks";
    "fort";
    "frd";
    "frds";
    "freeway";
    "freewy";
    "frg";
    "frgs";
    "frk";
    "frks";
    "frry";
    "frst";
    "frt";
    "frway";
    "frwy";
    "fry";
    "ft";
    "fwy";
    "garden";
    "gardens";
    "gardn";
    "gateway";
    "gatewy";
    "gatway";
    "gdn";
    "gdns";
    "glen";
    "glens";
    "gln";
    "glns";
    "grden";
    "grdn";
    "grdns";
    "green";
    "greens";
    "grn";
    "grns";
    "grov";
    "grove";
    "groves";
    "grv";
    "grvs";
    "gtway";
    "gtwy";
    "harb";
    "harbor";
    "harbors";
    "harbr";
    "haven";
    "havn";
    "hbr";
    "hbrs";
    "height";
    "heights";
    "hgts";
    "highway";
    "highwy";
    "hill";
    "hills";
    "hiway";
    "hiwy";
    "hl";
    "hllw";
    "hls";
    "hollow";
    "hollows";
    "holw";
    "holws";
    "hrbor";
    "ht";
    "hts";
    "hvn";
    "hway";
    "hwy";
    "inlet";
    "inlt";
    "is";
    "island";
    "islands";
    "isle";
    "isles";
    "islnd";
    "islnds";
    "iss";
    "jct";
    "jction";
    "jctn";
    "jctns";
    "jcts";
    "junction";
    "junctions";
    "junctn";
    "juncton";
    "key";
    "keys";
    "knl";
    "knls";
    "knol";
    "knoll";
    "knolls";
    "ky";
    "kys";
    "la";
    "lake";
    "lakes";
    "landing";
    "lane";
    "lanes";
    "lck";
    "lcks";
    "ldg";
    "ldge";
    "lf";
    "lgt";
    "lgts";
    "light";
    "lights";
    "lk";
    "lks";
    "ln";
    "lndg";
    "lndng";
    "loaf";
    "lock";
    "locks";
    "lodg";
    "lodge";
    "loop";
    "loops";
    "manor";
    "manors";
    "mdw";
    "mdws";
    "meadow";
    "meadows";
    "medows";
    "mill";
    "mills";
    "mission";
    "missn";
    "ml";
    "mls";
    "mnr";
    "mnrs";
    "mnt";
    "mntain";
    "mntn";
    "mntns";
    "motorway";
    "mount";
    "mountain";
    "mountains";
    "mountin";
    "msn";
    "mssn";
    "mt";
    "mtin";
    "mtn";
    "mtns";
    "mtwy";
    "nck";
    "neck";
    "opas";
    "orch";
    "orchard";
    "orchrd";
    "oval";
    "overpass";
    "ovl";
    "park";
    "parks";
    "parkway";
    "parkways";
    "parkwy";
    "passage";
    "path";
    "paths";
    "pike";
    "pikes";
    "pine";
    "pines";
    "pk";
    "pkway";
    "pkwy";
    "pkwys";
    "pky";
    "pl";
    "place";
    "plain";
    "plaines";
    "plains";
    "plaza";
    "pln";
    "plns";
    "plz";
    "plza";
    "pne";
    "pnes";
    "point";
    "points";
    "port";
    "ports";
    "pr";
    "prairie";
    "prarie";
    "prk";
    "prr";
    "prt";
    "prts";
    "psge";
    "pt";
    "pts";
    "rad";
    "radial";
    "radiel";
    "radl";
    "ranch";
    "ranches";
    "rapid";
    "rapids";
    "rd";
    "rdg";
    "rdge";
    "rdgs";
    "rds";
    "rest";
    "ridge";
    "ridges";
    "riv";
    "river";
    "rivr";
    "rnch";
    "rnchs";
    "road";
    "roads";
    "route";
    "rpd";
    "rpds";
    "rst";
    "rte";
    "rvr";
    "shl";
    "shls";
    "shoal";
    "shoals";
    "shoar";
    "shoars";
    "shore";
    "shores";
    "shr";
    "shrs";
    "skwy";
    "skyway";
    "smt";
    "spg";
    "spgs";
    "spng";
    "spngs";
    "spring";
    "springs";
    "sprng";
    "sprngs";
    "spur";
    "spurs";
    "sq";
    "sqr";
    "sqre";
    "sqrs";
    "sqs";
    "squ";
    "square";
    "squares";
    "st";
    "sta";
    "station";
    "statn";
    "stn";
    "str";
    "stra";
    "strav";
    "strave";
    "straven";
    "stravenue";
    "stravn";
    "stream";
    "street";
    "streets";
    "streme";
    "strm";
    "strt";
    "strvn";
    "strvnue";
    "sts";
    "sumit";
    "sumitt";
    "summit";
    "ter";
    "terr";
    "terrace";
    "throughway";
    "tpk";
    "tpke";
    "tr";
    "trace";
    "traces";
    "track";
    "tracks";
    "trafficway";
    "trail";
    "trails";
    "trak";
    "trce";
    "trfy";
    "trk";
    "trks";
    "trl";
    "trls";
    "trnpk";
    "trpk";
    "trwy";
    "tunel";
    "tunl";
    "tunls";
    "tunnel";
    "tunnels";
    "tunnl";
    "turnpike";
    "turnpk";
    "un";
    "underpass";
    "union";
    "unions";
    "uns";
    "upas";
    "valley";
    "valleys";
    "vally";
    "vdct";
    "via";
    "viadct";
    "viaduct";
    "view";
    "views";
    "vill";
    "villag";
    "village";
    "villages";
    "ville";
    "villg";
    "villiage";
    "vis";
    "vist";
    "vista";
    "vl";
    "vlg";
    "vlgs";
    "vlly";
    "vly";
    "vlys";
    "vst";
    "vsta";
    "vw";
    "vws";
    "walk";
    "walks";
    "way";
    "well";
    "wells";
    "wl";
    "wls";
    "wy";
    "xing";
    "xrd";
    );

  ~addressParts = Substitute ( ~address ; [ " " ; ¶ ] ; [ "¶,¶" ; "¶" ] ); // split into list
  ~addressNoSpaces = Substitute ( ~address ; [ " " ; "" ] );
  ~commaCount = PatternCount ( ~address ; "," );
  ~has3Commas = ~commaCount = 3;
  ~has2Commas = ~commaCount = 2;
  ~has1Comma = ~commaCount = 1;
  ~addressPartsComma = If ( ~commaCount ≥ 2 ; Substitute ( ~address ; [ " ," ; ¶ ] ) );
  ~lastWord = RightWords ( ~address ; 1 );
  ~firstWord = LeftWords ( ~address ; 1 );
  ~hasNumber = ~firstWord = Filter ( ~firstWord ; "0123456789" );
  ~hasZip = ~lastWord = Filter ( ~lastWord ; "0123456789-" );
  ~zip = If ( ~hasZip ; ~lastWord );
  ~number = If ( ~hasNumber ; ~firstWord );
  ~hasPOBox = Position ( ~addressNoSpaces ; "pobox" ; 1 ; 1 );
  ~unitType = LeftWords ( FilterValues ( ~addressParts ; ~units ) ; 1 );
  ~unit = If ( not IsEmpty ( ~unitType ) ;
      LeftWords ( GetValue ( Substitute ( ~address ; ~unitType ; ¶ ) ; 2 ) ; 1 )
      );
  ~unitType = If ( ~hasPOBox ; "" ; ~unitType ); //clear unitType when PO Box
  ~unit = If ( ~hasPOBox ; "" ; ~unit ); //clear unit when PO Box
  ~directional = LeftWords ( FilterValues ( ~addressParts ; ~directionals ) ; 1 ); // Extract any
  ~directional = If ( Substitute ( LeftWords ( ~address ; 2 ) ; " " ; "" ) = ~number & ~directional ; ~directional ; "" );
  ~stateLong = RightWords ( FilterValues ( ~address ; ~statesAbbr ) ; 1 );
  ~stateShort = RightWords ( FilterValues ( ~addressParts ; ~statesAbbr ) ; 1 );
  ~state = If ( not IsEmpty ( ~stateShort ) ; ~stateShort );
  ~streetType = FilterValues ( ~addressParts ; ~streets );
  ~streetTypeCount = ValueCount ( ~streetType );
  ~streetType = If ( ~streetTypeCount > 1 ; RightWords ( ~streetType ; 1 ) ; LeftWords ( ~streetType ; 1 ) );
  ~streetTypeComma = If ( ~commaCount ≥ 2 ; GetValue ( ~addressPartsComma ; 1 ) ); // first line including street and type
  ~streetTypeComma = RightWords ( FilterValues ( Substitute ( ~streetTypeComma ; [ " " ; ¶ ] ) ; ~streets ) ; 1 );
  ~streetTypeComma = If ( ~streetTypeComma = RightWords( GetValue ( ~addressPartsComma ; 1 ) ; 1 ) ; ~streetTypeComma ; "" );
  ~streetType = If ( ~commaCount ≥ 2 ; ~streetTypeComma ; ~streetType );
  // Remove all the parts we've found so far
  ~addressMinusParts = Substitute ( ~address ;
    [ If ( Length ( ~number ) ; ~number & " " ) ; "" ];
    [ If ( Length ( ~directional ) ; " " & ~directional & " " ) ; "" ]; // this works because ~address is padded with spaces
    [ If ( Length ( ~unitType ) ; ~unitType & " " & ~unit ) ; "" ];
    [ If ( Length ( ~state ) ; " " & ~state ) ; "" ];
    [ If ( Length ( ~zip ) ; " " & ~zip ) ; "" ]
    );

  ~extraNumbers = Filter ( ~addressMinusParts ; "0123456789" );
  ~streetType = If ( LeftWords ( ~addressMinusParts ; 1 ) = ~streetType ; "" ; ~streetType );
  ~addressRemaining = Substitute ( ~addressMinusParts ; "," ; ¶ );
  ~pobox = If ( ~hasPOBox ; LeftWords ( ~address ; 4 ) );
  ~addressRemaining = If ( ~hasPOBox ; Substitute ( ~addressRemaining ; ~pobox ; ~pobox & ¶ ) ; ~addressRemaining );
  ~addressRemaining = If ( not IsEmpty ( ~streetType );
    // A clunky way of cleaning up empty lines with spaces and returns
    Substitute ( ~addressRemaining ;
        [ ~streetType ; ~streetType & ¶ ];
        [ "¶¶" ; ¶ ];
        [ "¶ ¶" ; ¶ ];
        [ "¶  ¶" ; ¶ ];
        [ "¶   ¶" ; ¶ ]
        );
      ~addressRemaining );
  ~street = Case (
    not IsEmpty ( ~streetType );
      Left ( ~address ; Position ( ~address ; ~streetType ; 1 ; 1 ) - 1 );

    ~has1Comma; // best guess, hoping comma separates street/city.
      GetValue ( ~addressRemaining ; 1 );

      ""
        );
  ~street = Substitute ( ~street ;
    [ If ( Length ( ~number ) ; ~number ) ; "" ] ;
    [ If ( Length ( ~directional ) ; " " & ~directional & " " ) ; "" ]
    ); // remove number and directional
  ~streetComma = If ( ~commaCount ≥ 2 ; Substitute ( GetValue ( ~addressPartsComma ; 1 ) ;
    [ If ( Length ( ~number ) ; ~number & " " ) ; "" ];
    [ If ( Length ( ~directional ) ; " " & ~directional & " " ) ; "" ];
    [ If ( Length ( ~streetType ) ; " " & ~streetType ) ; "" ]
    ));
  ~street = If ( ~commaCount ≥ 2 ; ~streetComma ; ~street );
  ~street = Trim ( Case (
    ~hasPOBox ;
      Substitute ( ~street ; "P O Box" ; "P.O. Box" );

    ~street
    ) );
  ~city = Case (
    ~has3Commas;
      GetValue ( ~addressRemaining ; 2 );

    not IsEmpty ( ~streetType );
      GetValue ( Substitute ( ~addressMinusParts ; [ ~streetType ; ¶ ] ; [ ~state ; ¶ ] ) ; 2 );

    ~has1Comma;
      GetValue ( ~addressRemaining ; 2 );

      ""
        );
  ~cityComma = If ( ~has2Commas ; Substitute ( GetValue ( ~addressPartsComma ; 2 ) ;
    [ If ( Length ( ~unitType ) ; ~unitType & " " & ~unit ) ; "" ] ) );
  ~city = Trim ( Substitute ( If ( ~has2Commas ; ~cityComma ; ~city ) ; "," ; "" ) );

  //Cleanup & fixes
  ~unitType = If ( Position ( address ; "#" ; 1 ; 1 ) ; "#" ; ~unitType ) // replace # back from normalized ~address
];
  "{ "
  & Substitute ( List (
    If ( not IsEmpty ( ~number ) ; "\"number\": \"" & ~number & "\"");
    If ( not IsEmpty ( ~directional ) ; "\"prefix\": \"" & ~directional & "\"");
    If ( not IsEmpty ( ~street ) ; "\"street\": \"" & ~street & "\"");
    If ( not IsEmpty ( ~streetType ) ; "\"type\": \"" & ~streetType & "\"");
    If ( not IsEmpty ( ~unitType ) ; "\"unittype\": \"" & ~unitType & "\"");
    If ( not IsEmpty ( ~unit ) ; "\"unit\": \"" & ~unit & "\"");
    If ( not IsEmpty ( ~city ) ; "\"city\": \"" & ~city & "\"");
    If ( not IsEmpty ( ~state ) ; "\"state\": \"" & ~state & "\"");
    If ( not IsEmpty ( ~zip ) ; "\"zip\": \"" & ~zip & "\"");
  ) ; ¶ ; ", " )
  & " }"

  // Debugging & testing - set condition to true to reveal
  & If ( True ; List (
    "¶-----------------";
    ~address;
    "-----------------";
    ~addressNoSpaces;
    "-----------------";
    ~addressPartsComma;
    "-----------------";
    ~addressMinusParts;
    "-----------------";
    ~addressRemaining;
    "-----------------";
    ~extraNumbers;
    "-----------------";
    "~firstWord = " & ~firstWord;
    "~lastWord = " & ~lastWord;
    "~hasZip = " & ~hasZip;
    "~hasNumber = " & ~hasNumber;
    "~hasPOBox = " & ~hasPOBox;
    "~number = " & ~number;
    "~directional = " & ~directional;
    "~streetType = " & ~streetType;
    "~streetTypeCount = " & ~streetTypeCount;
    "~unitType = " & ~unitType;
    "~unit = " & ~unit;
    "~stateLong = " & ~stateLong;
    "~stateShort = " & ~stateShort;
    "~state = " & ~state;
    "~street = " & ~street;
    "~city = " & ~city;
    "~zip = " & ~zip;
    "-----------------";
    ¶;
    )
  )
)

/*
Inspiration from
http://cpansearch.perl.org/src/TIMB/Geo-StreetAddress-US-1.04/US.pm
 */
